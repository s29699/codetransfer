=============================CodeWithComment=================================

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <pthread.h>
#include <arpa/inet.h>

#define PORT 6969
#define MAXLINE 1024
#define MAXCLIENTS 100
#define MAXEMPLOYEES 100

typedef struct {
    char query[100];
    char response[100];
} ChatBotDB;

typedef struct {
    int sockfd;
    struct sockaddr_in clientaddr;
} ClientInfo;

pthread_mutex_t lock;
ChatBotDB database[MAXCLIENTS];
char employeeIDs[MAXEMPLOYEES][20];
int dbSize = 0;
int empSize = 0;

void log_message(const char *level, const char *message) {
    printf("[%s] %s\n", level, message);
}

void processQuery(char *query, char *response) {
    for (int i = 0; i < dbSize; i++) {
        if (strcasecmp(query, database[i].query) == 0) {
            strcpy(response, database[i].response);
            return;
        }
    }
    strcpy(response, "I'm sorry, I don't understand your query.");
}

void loadDatabase() {
    FILE *file = fopen("database.txt", "r");
    if (!file) {
        log_message("FATAL", "Failed to open database file");
        exit(EXIT_FAILURE);
    }

    while (fscanf(file, "%s %[^\n]", database[dbSize].query, database[dbSize].response) != EOF) {
        dbSize++;
    }

    fclose(file);
    log_message("INFO", "Database loaded successfully");
}

void loadEmployeeIDs() {
    FILE *file = fopen("employees.txt", "r");
    if (!file) {
        log_message("FATAL", "Failed to open employee IDs file");
        exit(EXIT_FAILURE);
    }

    while (fscanf(file, "%s", employeeIDs[empSize]) != EOF) {
        empSize++;
    }

    fclose(file);
    log_message("INFO", "Employee IDs loaded successfully");
}

int validateEmployeeID(char *employeeID) {
    for (int i = 0; i < empSize; i++) {
        if (strcmp(employeeID, employeeIDs[i]) == 0) {
            return 1;
        }
    }
    return 0;
}

void handleClient(void *arg) {
    ClientInfo clientInfo = *(ClientInfo *)arg;
    int sockfd = clientInfo.sockfd;
    char buffer[MAXLINE];
    char response[MAXLINE];
    char employeeID[100];
    char employeeDetails[MAXLINE];
    int validEmployee = 0;

    pthread_mutex_unlock(&lock);

    // Ask for employee ID and validate
    write(sockfd, "Enter your employee ID: ", strlen("Enter your employee ID: "));
    memset(employeeID, 0, sizeof(employeeID));
    int n = read(sockfd, employeeID, sizeof(employeeID));
    if (n <= 0) {
        close(sockfd);
        log_message("INFO", "Client disconnected during employee ID input");
        return;
    }
    employeeID[strcspn(employeeID, "\n")] = 0;  // Remove newline character
    log_message("DEBUG", employeeID);  // Log the received employee ID

    // Validate employee ID
    if (validateEmployeeID(employeeID)) {
        validEmployee = 1;
        write(sockfd, "Employee ID validated. How can I help you?\n", strlen("Employee ID validated. How can I help you?\n"));
        log_message("INFO", "Employee ID validated.");
    } else {
        write(sockfd, "Invalid ID. Please enter your details: ", strlen("Invalid ID. Please enter your details: "));
        memset(employeeDetails, 0, sizeof(employeeDetails));
        n = read(sockfd, employeeDetails, sizeof(employeeDetails));
        if (n <= 0) {
            close(sockfd);
            log_message("INFO", "Client disconnected during employee details input");
            return;
        }
        employeeDetails[strcspn(employeeDetails, "\n")] = 0;  // Remove newline character
        log_message("INFO", "Received new employee details");
        write(sockfd, "Details received. How can I help you?\n", strlen("Details received. How can I help you?\n"));
    }

    while (1) {
        memset(buffer, 0, MAXLINE);
        n = read(sockfd, buffer, sizeof(buffer));
        if (n <= 0) {
            close(sockfd);
            log_message("INFO", "Client disconnected");
            return;
        }

        buffer[n] = '\0';
        log_message("DEBUG", buffer);

        if (strcasecmp(buffer, "bye") == 0) {
            write(sockfd, "Goodbye!\n", strlen("Goodbye!\n"));
            close(sockfd);
            log_message("INFO", "Client disconnected");
            return;
        }

        processQuery(buffer, response);
        write(sockfd, response, strlen(response));
        log_message("INFO", "Response sent to client");
    }
}

int main() {
    int sockfd, newsockfd;
    struct sockaddr_in servaddr, cliaddr;
    socklen_t len;

    loadDatabase();
    loadEmployeeIDs();

    //socket(domain,type,protocol) => SOCK_STREAM ->TCP, 0->IP
    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) == -1) 
        log_message("FATAL", "Socket creation failed");
        exit(EXIT_FAILURE);
    }

    memset(&servaddr, 0, sizeof(servaddr));
    servaddr.sin_family = AF_INET;//for different hosts connected by IPV4
    servaddr.sin_addr.s_addr = INADDR_ANY;//
    servaddr.sin_port = htons(PORT);

    if (bind(sockfd, (const struct sockaddr *)&servaddr, sizeof(servaddr)) == -1) {
        log_message("FATAL", "Bind failed");
        close(sockfd);
        exit(EXIT_FAILURE);
    }

    // listen(sockfd, backlog) => backlog se jyada client nahi add honge. Error: ECONNREFUSED aayega
    if (listen(sockfd, 5) == -1) {
        log_message("FATAL", "Listen failed");
        close(sockfd);
        exit(EXIT_FAILURE);
    }

    log_message("INFO", "Server listening on port 8080");

    while (1) {
        len = sizeof(cliaddr);
        if ((newsockfd = accept(sockfd, (struct sockaddr *)&cliaddr, &len)) == -1) {
            log_message("WARNING", "Accept failed");
            continue;
        }

        pthread_mutex_lock(&lock);
        ClientInfo clientInfo = {newsockfd, cliaddr};
        pthread_t tid;
        pthread_create(&tid, NULL, (void *)handleClient, (void *)&clientInfo);
    }

    close(sockfd);
    return 0;
}
















===================================================================================


// Client Code: client.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <pthread.h>

#define PORT 12345
#define BUFFER_SIZE 1024

int client_socket;
char alias[50];

void *receive_messages(void *arg) {
    char buffer[BUFFER_SIZE];
    int read_size;

    while ((read_size = recv(client_socket, buffer, BUFFER_SIZE, 0)) > 0) {
        buffer[read_size] = '\0';
        printf("%s\n", buffer);
    }

    return NULL;
}

void *send_messages(void *arg) {
    char message[BUFFER_SIZE];

    while (1) {
        fgets(message, BUFFER_SIZE, stdin);
        message[strcspn(message, "\n")] = '\0'; // Remove newline character
        send(client_socket, message, strlen(message), 0);
    }

    return NULL;
}

int main() {
    struct sockaddr_in server_addr;
    pthread_t send_thread, receive_thread;

    printf("Enter your alias: ");
    fgets(alias, 50, stdin);
    alias[strcspn(alias, "\n")] = '\0'; // Remove newline character

    client_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (client_socket == -1) {
        perror("Could not create socket");
        exit(EXIT_FAILURE);
    }

    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = inet_addr("127.0.0.1");
    server_addr.sin_port = htons(PORT);

    if (connect(client_socket, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        perror("Connect failed");
        close(client_socket);
        exit(EXIT_FAILURE);
    }

    send(client_socket, alias, strlen(alias), 0);

    if (pthread_create(&receive_thread, NULL, receive_messages, NULL) != 0) {
        perror("Could not create receive thread");
        return 1;
    }

    if (pthread_create(&send_thread, NULL, send_messages, NULL) != 0) {
        perror("Could not create send thread");
        return 1;
    }

    pthread_join(receive_thread, NULL);
    pthread_join(send_thread, NULL);

    close(client_socket);
    return 0;
}




-----------------------------------------SERVER----------------------------

// Server Code: server.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <pthread.h>

#define PORT 12345
#define MAX_CLIENTS 100
#define BUFFER_SIZE 1024

int client_sockets[MAX_CLIENTS];
int client_count = 0;
pthread_mutex_t clients_mutex = PTHREAD_MUTEX_INITIALIZER;

typedef struct {
    char *keyword;
    char *response;
} KeywordResponse;

KeywordResponse keyword_responses[] = {
    {"hello", "Hello! How can I help you?"},
    {"bye", "Goodbye! Have a great day!"},
    {"help", "How can I assist you?"},
    {"thanks", "You're welcome!"},
    {"time", "I am just a server, but you can check your system's clock."},
    {"name", "I am a simple chat server."}
};

int keyword_count = sizeof(keyword_responses) / sizeof(keyword_responses[0]);

void broadcast_message(char *message, int exclude_socket) {
    pthread_mutex_lock(&clients_mutex);
    for (int i = 0; i < client_count; i++) {
        if (client_sockets[i] != exclude_socket) {
            if (send(client_sockets[i], message, strlen(message), 0) < 0) {
                perror("Error sending message");
                break;
            }
        }
    }
    pthread_mutex_unlock(&clients_mutex);
}

void send_message_to_client(char *message, int client_socket) {
    if (send(client_socket, message, strlen(message), 0) < 0) {
        perror("Error sending message");
    }
}

void check_keywords_and_respond(char *message, int client_socket) {
    for (int i = 0; i < keyword_count; i++) {
        if (strstr(message, keyword_responses[i].keyword) != NULL) {
            send_message_to_client(keyword_responses[i].response, client_socket);
            break;
        }
    }
}

void *handle_client(void *arg) {
    int client_socket = *((int *)arg);
    char buffer[BUFFER_SIZE];
    int read_size;

    // Receive alias from the client
    if ((read_size = recv(client_socket, buffer, BUFFER_SIZE, 0)) > 0) {
        buffer[read_size] = '\0';
        char welcome_message[BUFFER_SIZE];
        sprintf(welcome_message, "%s has joined the chat!\n", buffer);
        broadcast_message(welcome_message, client_socket);
    }

    while ((read_size = recv(client_socket, buffer, BUFFER_SIZE, 0)) > 0) {
        buffer[read_size] = '\0';
        broadcast_message(buffer, client_socket);
        check_keywords_and_respond(buffer, client_socket);
    }

    // Client disconnected
    pthread_mutex_lock(&clients_mutex);
    for (int i = 0; i < client_count; i++) {
        if (client_sockets[i] == client_socket) {
            for (int j = i; j < client_count - 1; j++) {
                client_sockets[j] = client_sockets[j + 1];
            }
            break;
        }
    }
    client_count--;
    pthread_mutex_unlock(&clients_mutex);

    close(client_socket);
    pthread_exit(NULL);
}

int main() {
    int server_socket, client_socket;
    struct sockaddr_in server_addr, client_addr;
    socklen_t client_len = sizeof(client_addr);
    pthread_t tid;

    server_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (server_socket == -1) {
        perror("Could not create socket");
        exit(EXIT_FAILURE);
    }

    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(PORT);

    if (bind(server_socket, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        perror("Bind failed");
        close(server_socket);
        exit(EXIT_FAILURE);
    }

    if (listen(server_socket, 3) < 0) {
        perror("Listen failed");
        close(server_socket);
        exit(EXIT_FAILURE);
    }

    printf("Server is listening on port %d\n", PORT);

    while ((client_socket = accept(server_socket, (struct sockaddr *)&client_addr, &client_len))) {
        pthread_mutex_lock(&clients_mutex);
        client_sockets[client_count++] = client_socket;
        pthread_mutex_unlock(&clients_mutex);

        if (pthread_create(&tid, NULL, handle_client, (void *)&client_socket) != 0) {
            perror("Could not create thread");
            return 1;
        }
    }

    if (client_socket < 0) {
        perror("Accept failed");
        close(server_socket);
        return 1;
    }

    close(server_socket);
    return 0;
}


=====================================================================================================================================
2)

// server.c
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <arpa/inet.h>

#define PORT 8080
#define MAXLINE 1024

// Define a structure for our chatbot's responses
typedef struct {
    char *query;
    char *response;
} Response;

Response responses[] = {
    {"hello", "Hi there! How can I assist you today?"},
    {"info", "I can provide information about our college for freshers. What would you like to know?"},
    {"courses", "We offer a variety of courses including Computer Science, Mechanical Engineering, and Civil Engineering."},
    {"admission", "Our admission process is online. Please visit our website for more details."},
    {"bye", "Goodbye! Have a great day!"},
    {NULL, NULL}
};

void handle_client(int new_socket) {
    char buffer[MAXLINE];
    int n;

    // Read the client's query
    n = read(new_socket, buffer, sizeof(buffer) - 1);
    if (n < 0) {
        perror("read");
        close(new_socket);
        exit(EXIT_FAILURE);
    }
    buffer[n] = '\0';

    // Search for a matching response
    for (int i = 0; responses[i].query != NULL; i++) {
        if (strcmp(buffer, responses[i].query) == 0) {
            write(new_socket, responses[i].response, strlen(responses[i].response));
            close(new_socket);
            return;
        }
    }

    // Default response if no match is found
    char *default_response = "I'm sorry, I don't understand that query.";
    write(new_socket, default_response, strlen(default_response));
    close(new_socket);
}

int main() {
    int server_fd, new_socket;
    struct sockaddr_in address;
    int opt = 1;
    int addrlen = sizeof(address);

    // Create socket file descriptor
    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("socket failed");
        exit(EXIT_FAILURE);
    }

    // Attach socket to the port 8080
    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {
        perror("setsockopt");
        close(server_fd);
        exit(EXIT_FAILURE);
    }

    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(PORT);

    // Bind the socket to the network address and port
    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {
        perror("bind failed");
        close(server_fd);
        exit(EXIT_FAILURE);
    }

    // Start listening for incoming connections
    if (listen(server_fd, 3) < 0) {
        perror("listen");
        close(server_fd);
        exit(EXIT_FAILURE);
    }

    printf("Server listening on port %d\n", PORT);

    // Accept and handle incoming connections
    while ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t *)&addrlen)) >= 0) {
        handle_client(new_socket);
    }

    if (new_socket < 0) {
        perror("accept");
        close(server_fd);
        exit(EXIT_FAILURE);
    }

    return 0;
}

---------------------------------------------------------------------------------
// client.c
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <arpa/inet.h>

#define PORT 8080
#define MAXLINE 1024

int main() {
    int sock = 0;
    struct sockaddr_in serv_addr;
    char buffer[MAXLINE] = {0};

    // Create socket
    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        printf("\n Socket creation error \n");
        return -1;
    }

    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(PORT);

    // Convert IPv4 and IPv6 addresses from text to binary form
    if (inet_pton(AF_INET, "127.0.0.1", &serv_addr.sin_addr) <= 0) {
        printf("\nInvalid address/ Address not supported \n");
        return -1;
    }

    // Connect to the server
    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {
        printf("\nConnection Failed \n");
        return -1;
    }

    while (1) {
        printf("Enter your query: ");
        fgets(buffer, MAXLINE, stdin);
        buffer[strcspn(buffer, "\n")] = 0; // Remove newline character

        // Send query to the server
        send(sock, buffer, strlen(buffer), 0);

        // Read the server's response
        int valread = read(sock, buffer, MAXLINE);
        buffer[valread] = '\0';
        printf("Server: %s\n", buffer);

        if (strcmp(buffer, "Goodbye! Have a great day!") == 0) {
            break;
        }
    }

    close(sock);
    return 0;
}

===============================================================================================================
